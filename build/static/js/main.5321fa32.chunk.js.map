{"version":3,"sources":["redux/actionConstants.js","redux/storeConstants.js","redux/reducers/login.js","redux/reducers/user.js","redux/reducers/threads.js","redux/reducers/posts.js","redux/store.js","fbConfig.js","redux/actions.js","components/Thread.js","components/PostCreator.js","components/Post.js","components/ViewChange.js","components/ThreadCreator.js","components/Login.js","components/Loading.js","components/ThreadBoard.js","views/App.js","reportWebVitals.js","index.js"],"names":["LOGIN_SUCCESS","INVALID_LOGIN","LOGIN_NETWORK_ERROR","LOGOUT","STORE_THREAD","STORE_POSTS","POPULATE_THREADS","POPULATE_POST","CLEAR_POSTS","PRESENT_A_THREAD","LOGIN_STATE","INITIAL_STATE","loginState","thread","tags","selectThread","undefined","posts","rootReducer","combineReducers","login","state","action","type","user","payload","threads","createStore","applyMiddleware","thunkMiddleware","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","database","firestore","arrayUnique","array","a","concat","i","length","j","splice","presentAThread","threadId","validateUser","username","password","dispatch","collection","where","get","then","querySnapshot","size","doc","docs","id","name","data","loginSuccess","catch","error","console","log","getThreads","tagsList","forEach","thread_id","message","post_time","title","storeThread","addThread","user_name","store","getState","tagList","allTags","add","newDoc","populateThreads","getPosts","push","post_id","storePosts","addPost","post","Thread","props","time","Date","className","style","marginBottom","toString","icon","faTags","PostCreator","useSelector","useDispatch","useState","isValid","setMessage","canSubmit","clearForm","faReply","htmlFor","value","onChange","e","event","target","display","disabled","onClick","now","onSubmit","Post","useEffect","currentPosts","orderPosts","sort","b","postTime","faEnvelopeOpen","map","ViewChange","changeView","index","faChevronRight","faChevronLeft","ThreadCreator","setTitle","setTags","faEnvelope","result","list","split","onTagsInputChange","editingBegun","Login","setUsername","setPassword","handleLogin","handleKeyPress","keyCode","preventDefault","faUser","role","onKeyUp","faSignInAlt","Loading","aria-hidden","ThreadBoard","tagChoice","selectedThread","tagSet","decideTagSet","quickLogOut","ids","Object","keys","faFilter","multiple","Array","from","selectedOptions","option","tag","faMailBulk","filter","includes","faSignOutAlt","App","faComments","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5321fa32.chunk.js","sourcesContent":["export const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const INVALID_LOGIN = \"INVALID_LOGIN\";\nexport const LOGIN_NETWORK_ERROR = \"LOGIN_NETWORK_ERROR\";\nexport const LOGOUT = \"LOGOUT\";\nexport const STORE_THREAD = \"STORE_THREAD\";\nexport const STORE_POSTS = \"STORE_POSTS\";\nexport const POPULATE_THREADS = \"POPULATE_THREADS\";\nexport const POPULATE_POST = \"POPULATE_POST\"\nexport const CLEAR_POSTS = \"CLEAR_POSTS\"\nexport const PRESENT_A_THREAD = \"PRESENT_A_THREAD\"\n","export const LOGIN_STATE = {\n    LOGGED_IN: \"logged in\",\n    LOGGED_OUT: \"logged out\",\n    INVALID_LOGIN: \"invalid login\",\n    NETWORK_ERROR: \"network error\"\n}\n","import {LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, LOGOUT} from \"../actionConstants\";\nimport {LOGIN_STATE} from \"../storeConstants\";\n\nconst INITIAL_STATE = {\n    loginState: LOGIN_STATE.LOGGED_OUT\n}\n\nexport const loginReducer = (state=INITIAL_STATE, action) => {\n    switch (action.type) {\n        case LOGIN_SUCCESS:\n            return { loginState: LOGIN_STATE.LOGGED_IN }\n        case INVALID_LOGIN:\n            return {loginState: LOGIN_STATE.INVALID_LOGIN }\n        case LOGIN_NETWORK_ERROR:\n            return {loginState: LOGIN_STATE.NETWORK_ERROR }\n        case LOGOUT:\n            return {loginState: LOGIN_STATE.LOGGED_OUT }\n        default:\n            return state;\n    }\n}","import {LOGIN_SUCCESS, LOGOUT} from \"../actionConstants\";\n\nconst INITIAL_STATE = {}\n\nexport const userReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case LOGIN_SUCCESS:\n            return action.payload.user;\n        case LOGOUT:\n            return INITIAL_STATE;\n        default:\n            return state;\n    }\n}","import { PRESENT_A_THREAD,LOGOUT,STORE_THREAD,POPULATE_THREADS} from \"../actionConstants\";\n\nconst INITIAL_STATE = {\n    thread:{},\n    tags:[],\n    selectThread:undefined\n\n};\n\nexport const threadReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case STORE_THREAD:\n            return {\n                thread:action.payload.thread,\n                tags:action.payload.tags\n            }\n\n        case  PRESENT_A_THREAD:\n            return{\n                ...state,\n                selectThread: action.payload.selectThread\n            }\n\n        case POPULATE_THREADS:\n            return {\n                thread: action.payload.thread,\n                tags:action.payload.tags\n            }\n\n\n        case LOGOUT:\n            return INITIAL_STATE;\n        default:\n            return state;\n    }\n}","import {LOGOUT, CLEAR_POSTS, STORE_POSTS, POPULATE_POST} from \"../actionConstants\";\n\nconst INITIAL_STATE = {\n    posts:[]\n};\n\nexport const postReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case STORE_POSTS:\n            return {posts:action.payload.posts};\n        case CLEAR_POSTS:\n            return{posts:action.payload.posts};\n        case POPULATE_POST:\n            return{posts:action.payload.posts};\n        case LOGOUT:\n            return INITIAL_STATE;\n        default:\n            return state;\n    }\n}","import {createStore, combineReducers, applyMiddleware} from \"redux\";\nimport {loginReducer} from \"./reducers/login\";\nimport {userReducer} from \"./reducers/user\";\nimport {threadReducer} from \"./reducers/threads\";\nimport {postReducer} from \"./reducers/posts\";\nimport thunkMiddleware from \"redux-thunk\";\n\nexport const rootReducer = combineReducers({\n    login: loginReducer,\n    user: userReducer,\n    threads: threadReducer,\n    posts:postReducer\n})\n\n\n\n\nexport default createStore(rootReducer, applyMiddleware(thunkMiddleware));","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n\n        apiKey: \"AIzaSyC7QtSboADmY-1WeqSAsncFUuNEG85SPws\",\n        authDomain: \"project5-9ecbd.firebaseapp.com\",\n        projectId: \"project5-9ecbd\",\n        storageBucket: \"project5-9ecbd.appspot.com\",\n        messagingSenderId: \"226792902705\",\n        appId: \"1:226792902705:web:91f338e672f141c2e40510\",\n        measurementId: \"G-997QXT3ZXE\"\n\n}\n\nfirebase.initializeApp(firebaseConfig);\nexport default firebase;","import {\n    PRESENT_A_THREAD,\n    CLEAR_POSTS,\n    POPULATE_THREADS,\n    LOGIN_NETWORK_ERROR,\n    LOGIN_SUCCESS,\n    LOGOUT,\n    INVALID_LOGIN,\n    STORE_THREAD,\n    STORE_POSTS,\n    POPULATE_POST\n} from \"./actionConstants\";\nimport firebase from \"../fbConfig\";\nimport store from \"./store\";\nconst database = firebase.firestore();\n\nconst arrayUnique =array=> {\n    var a = array.concat();\n    for(var i=0; i<a.length; ++i) {\n        for(var j=i+1; j<a.length; ++j) {\n            if(a[i] === a[j])\n                a.splice(j--, 1);\n        }\n    }\n    return a;\n}\n\nexport const storeThread = (thread,tags) => ({\n    type: STORE_THREAD,\n    payload: {\n        thread: thread,\n        tags:tags\n    }\n})\n\n\n\nexport const storePosts = posts => {\n    return {\n        type: STORE_POSTS,\n        payload: {\n            posts: posts\n        }\n    }\n}\n\nexport const presentAThread = threadId=>{\n\n    return{\n        type:PRESENT_A_THREAD,\n        payload:{\n            selectThread:threadId\n        }\n\n    }\n}\n\nexport const clearPosts = ()=>{\n    return{\n        type:CLEAR_POSTS,\n        payload:{\n            posts:[]\n        }\n    }\n}\n\n\nexport const loginSuccess = user => ({\n    type: LOGIN_SUCCESS,\n    payload: {\n        user\n    }\n});\n\nexport const loginFail = () => ({\n    type: INVALID_LOGIN\n});\n\nexport const loginNetworkError = () => ({\n    type: LOGIN_NETWORK_ERROR\n});\n\nexport const logout = () => ({\n    type: LOGOUT\n});\n\nexport const populateThreads = (thread,tagList) => ({\n    type: POPULATE_THREADS,\n    payload: {\n        thread:thread,\n        tags:tagList\n    }\n})\n\nexport const populatePosts = (newPosts) => ({\n    type: POPULATE_POST,\n    payload: {\n        posts:newPosts,\n    }\n})\n\nexport const validateUser = (username, password) => {\n    return dispatch => {\n        // UI feedback to show request initiated\n        database.collection(\"user\").where(\"name\", \"==\", username).where(\"password\", \"==\", password)\n            .get()\n            .then(querySnapshot => {\n                if (querySnapshot.size === 1) {\n                    const doc = querySnapshot.docs[0];\n                    const user = {\n                        id: doc.id,\n                        name:doc.data().name,\n                    }\n                    dispatch(loginSuccess(user));\n                } else {\n                    dispatch(loginFail());\n                }\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(loginNetworkError());\n            })\n    }\n}\n\nexport const getThreads = () => {\n    let tagsList =[]\n    return dispatch => {\n        database.collection(\"thread\")\n            .get()\n            .then((querySnapshot) => {\n                if (querySnapshot.size > 0) {\n                    const thread = {};\n                    querySnapshot.forEach(doc => {\n                       thread[doc.id] = {\n                           thread_id:doc.id,\n                            id:doc.data().id,\n                            message:doc.data().message,\n                            post_time:doc.data().post_time,\n                           tags:doc.data().tags,\n                           title:doc.data().title,\n                        }\n                        tagsList = arrayUnique(tagsList.concat(thread[doc.id].tags))\n                    })\n                    console.log(thread)\n                    console.log(tagsList)\n                    dispatch(storeThread(thread,tagsList));      }\n                else {\n                    console.log(\"No post\");\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n}\n\nexport const addThread =(message, title, tags, post_time, user_name)=>{\n    const thread =store.getState().threads.thread;\n    const tagList = store.getState().threads.tags;\n    let  allTags = arrayUnique(tagList.concat(tags));\n    return dispatch => {\n        database.collection(\"thread\")\n            .add({\n                id: user_name,\n                message:message,\n                title: title,\n                post_time:post_time,\n                tags:tags,\n            })\n            .then(newDoc => {\n                thread[newDoc.id] = {\n                    thread_id:newDoc.id,\n                    id: user_name,\n                    message:message,\n                    title: title,\n                    post_time:post_time,\n                    tags:tags,\n                }\n                dispatch(populateThreads(thread,allTags));\n            })\n            .catch(error => console.log(error));\n    }\n\n}\n\nexport const getPosts = (threadId) => {\n    return dispatch  => {\n        database.collection(\"thread\")\n            .doc(threadId)\n            .collection(\"posts\")\n            .get()\n            .then(querySnapshot => {\n                if (querySnapshot.size > 0) {\n                let posts= [];\n                querySnapshot.forEach(doc => {\n                    posts.push({\n                        post_id: doc.id,\n                        id:doc.data().id,\n                        message:doc.data().message,\n                        post_time:doc.data().post_time,\n                    })\n                })\n                console.log(posts)\n                dispatch(storePosts(posts))}\n                else{\n\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const addPost =(message, post_time, user_name,thread_id)=>{\n    const post =store.getState().posts.posts;\n    return dispatch => {\n        database.collection(\"thread\")\n            .doc(thread_id).collection(\"posts\")\n            .add({\n                id: user_name,\n                message:message,\n                post_time:post_time,\n            })\n            .then(newDoc => {\n                post.push({\n                    post_id: newDoc.id,\n                    id: user_name,\n                    message:message,\n                    post_time:post_time,\n                })\n                dispatch(populatePosts(post));\n            })\n            .catch(error => console.log(error));\n    }\n\n}\n\n","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faTags} from \"@fortawesome/free-solid-svg-icons\";\n\n\n\nconst Thread=props=>{\n\n    const time = new Date(props.thread.post_time)\n    // console.log(props.thread)\n\n    return (\n\n        <div className=\"card text-dark bg-light mb-3\" key={props.thread.id} style={{marginBottom:'1em' }}>\n            <div className=\"card-header\">Posted by: {time.toString()}</div>\n            <div className=\"card-body\">\n                <h2 className=\"card-title\">{props.thread.title}</h2>\n                <h3 className=\"card-subtitle\">From: {props.thread.id} </h3>\n                <h4 className=\"card-text text-end\"> <FontAwesomeIcon icon={faTags}/> {props.thread.tags.toString()}</h4>\n                <p className=\"card-text mt-3 thread-p \">{props.thread.message}</p>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Thread;","import {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addPost, getPosts} from \"../redux/actions\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faReply} from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst PostCreator = props =>{\n    const loginState = useSelector(state => state.login.loginState);\n    const thread= useSelector(state => state.threads.thread);\n    const user =useSelector(state=>state.user);\n    const dispatch =useDispatch()\n\n\n    const [message, setMessage] = useState({\n        message:\"\",\n        isValid:undefined});\n\n\n\n    const onMessageInputChange = event => {\n        setMessage({\n            message: event.target.value,\n            isValid:event.target.value.length > 0\n        })\n    }\n\n    let canSubmit = message.isValid && (loginState===\"logged in\")\n\n    const onSubmit = () => {\n        let user_name = user.name;\n        let post_time = Date.now();\n        dispatch(addPost(message.message, post_time, user_name, props.id));\n        dispatch(getPosts(thread[props.id].thread_id))\n        clearForm();\n    }\n\n    const clearForm = () => {\n        setMessage({\n            message:\"\",\n            isValid: undefined});\n    }\n\n\n\n    return (\n        <div className={\"p-3\"}>\n            <h2 className=\"display-6 font-weight-bold text-dark \" >Replay <FontAwesomeIcon icon={faReply}/> </h2>\n            <div className=\"row my-2\">\n                <label className=\"col-sm-3 col-form-label text-center fst-italic h5\" htmlFor=\"message\">Message:</label>\n                <div className=\"col-sm-9\">\n                        <textarea id=\"message\" className=\"form-control\"\n                                  value={message.message}\n                                  onChange={e => onMessageInputChange(e)}/>\n                    <div className=\"invalid-feedback\" style={message.isValid === false ? {display:\"block\"} : {display: \"none\"}}>Message cannot be empty</div>\n                </div>\n            </div>\n\n\n            <div className=\"row my-2\">\n                <div className=\"col text-end\">\n                    <button className=\"btn btn-primary btn-lg\" type=\"submit\" disabled={!canSubmit} onClick={()=>onSubmit()}>submit </button>\n                </div>\n            </div>\n\n        </div>\n\n    )\n\n\n}\n\nexport default  PostCreator;","import {useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getPosts} from \"../redux/actions\";\nimport PostCreator from \"./PostCreator\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faTags,faEnvelopeOpen} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Post =props=>{\n    const thread= useSelector(state => state.threads.thread);\n    const loginState = useSelector(state => state.login.loginState);\n    const dispatch =useDispatch();\n\n    useEffect(() => {\n        dispatch(getPosts(thread[props.id].thread_id))\n    }, [dispatch]);\n\n    const currentPosts = useSelector(state=>state.posts.posts)\n    const orderPosts = currentPosts.sort((a, b) => (a.post_time > b.post_time) ? 1 : -1)\n\n    console.log(currentPosts)\n    const time = new Date(thread[props.id].post_time)\n    const postTime = time =>{\n        const finalTime =new Date(time)\n        return finalTime.toString()\n    }\n\n\n    return (\n        <div className={\"p-2\"}>\n            <h2 className={\"display-5 font-weight-bold text-primary\"}> Post <FontAwesomeIcon icon={faEnvelopeOpen}/></h2>\n            <div className=\"card text-dark bg-light mb-3\" key={props.id} style={{marginBottom:'1em' }}>\n                <div className=\"card-header\">Posted by: {time.toString()}</div>\n                <div className=\"card-body\">\n                    <h2 className=\"card-title\">{thread[props.id].title}</h2>\n                    <h3 className=\"card-subtitle\">From: {thread[props.id].id} </h3>\n                    <h4 className=\"card-text text-end\"> <FontAwesomeIcon icon={faTags}/> {thread[props.id].tags.toString()}</h4>\n                    <p className=\"card-text mt-3 message\">{thread[props.id].message}</p>\n                </div>\n            </div>\n\n            <div>{\n                orderPosts.map((post,id)=>\n                    (\n                        <div className=\"card text-dark bg-light mb-3\" key={props.id} style={{marginBottom:'1em' }}>\n                            <div className=\"card-header\">Posted by: {postTime(post.post_time)}</div>\n                            <div className=\"card-body\">\n                                <h3 className=\"card-subtitle\">From: {post.id} </h3>\n                                <p className=\"card-text mt-3 message\">{post.message}</p>\n                            </div>\n                        </div>\n                    ))\n\n            }\n\n            </div>\n            {\n                loginState === \"logged in\" ?\n                    (<><PostCreator id={props.id}/></>) : \"\"\n            }\n        </div>\n\n    )\n\n}\nexport default Post;","import {useDispatch, useSelector} from \"react-redux\";\nimport Thread from \"./Thread\";\nimport Post from \"./Post\";\nimport {clearPosts, presentAThread} from \"../redux/actions\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faChevronRight, faChevronLeft} from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst ViewChange = props => {\n    const thread= useSelector(state => state.threads.thread);\n\n    const dispatch = useDispatch()\n\n    const changeView = index => {\n        if (index===0){\n            dispatch(clearPosts())\n            dispatch(presentAThread(undefined))\n        }\n        else(\n            dispatch(presentAThread(props.id))\n        )\n    }\n\n    return (\n        <div className={\"p-4\"}>\n            {\n                props.index===0?\n                    <><Thread thread={thread[props.id]}/>\n                    <button className={\"btn btn-outline-primary btn-lg\"} onClick={()=>changeView(1)}>See posts <FontAwesomeIcon icon={faChevronRight} /></button></>\n                    :\n                    <><Post id={props.id}/>\n                    <button className={\"btn btn-outline-primary btn-lg\"} onClick={()=>changeView(0)}> <FontAwesomeIcon icon={faChevronLeft} /> Back </button></>\n\n            }\n        </div>\n\n    )\n\n}\n\nexport default ViewChange;","import {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addThread} from \"../redux/actions\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEnvelope} from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst ThreadCreator = ()=>{\n    const loginState = useSelector(state => state.login.loginState);\n   const user =useSelector(state=>state.user);\n   const dispatch =useDispatch()\n\n\n    const [title, setTitle] = useState({\n        title:\"\",\n        isValid: undefined});\n    const [message, setMessage] = useState({\n        message:\"\",\n        isValid:undefined});\n    const [tags,setTags] =useState({\n        tags:[],\n        isValid:undefined\n    });\n\n    const onTitleInputChange = event => {\n        setTitle({\n           title: event.target.value,\n            isValid:event.target.value.length > 0\n        })\n    }\n\n    const onMessageInputChange = event => {\n        setMessage({\n            message: event.target.value,\n            isValid:event.target.value.length > 0\n        })\n    }\n\n\n\n    const onTagsInputChange = event =>{\n        let result = [];\n        if (event.target.value.length > 0) {\n            let list = event.target.value.split(\",\")\n            for (let i = 0; i < list.length; i++) {\n                result.push(list[i])\n            }\n        setTags({\n                tags: result,\n                isValid: true\n            })\n        }else{\n            setTags({\n                isValid: false\n            })\n        }\n    }\n\n    let canSubmit = tags.isValid && message.isValid && title.isValid && (loginState===\"logged in\")\n\n    const onSubmit = () => {\n        let user_name = user.name;\n        let post_time = Date.now();\n        dispatch(addThread(message.message, title.title, tags.tags, post_time, user_name));\n        clearForm();\n\n\n    }\n\n    const clearForm = () => {\n        setTitle({\n            title:\"\",\n            isValid: undefined});\n        setMessage({\n            message:\"\",\n            isValid: undefined});\n        setTags({\n            tags:[],\n            isValid: undefined});\n\n    }\n\n\n    return (\n        <div>\n            <h2 className={\"display-5 font-weight-bold text-dark\"}>Post a new thread <FontAwesomeIcon icon={faEnvelope}/></h2>\n                <div className=\"row my-2\">\n                    <label className=\"col-sm-3 col-form-label  text-center fst-italic h5\" htmlFor=\"title\">Title:</label>\n                    <div className=\"col-sm-9\">\n                        <input id=\"title\" className=\"form-control\" type=\"text\"\n                               value={title.title}\n                               onChange={e => onTitleInputChange(e)}/>\n                        <div className=\"invalid-feedback\" style={title.isValid===false ? {display:\"block\"} : {display: \"none\"}}>Title cannot be empty</div>\n                    </div>\n                </div>\n\n                <div className=\"row my-2\">\n                    <label className=\"col-sm-3 col-form-label text-center fst-italic h5\" htmlFor=\"message\">Message:</label>\n                    <div className=\"col-sm-9\">\n                        <textarea id=\"message\" className=\"form-control\"\n                               value={message.message}\n                               onChange={e => onMessageInputChange(e)}/>\n                        <div className=\"invalid-feedback\" style={message.isValid === false ? {display:\"block\"} : {display: \"none\"}}>Message cannot be empty</div>\n                    </div>\n                </div>\n\n                <div className=\"row my-2\">\n                    <label className=\"col-sm-3 col-form-label   text-center fst-italic h5\" htmlFor=\"tags\">Tags: <span className={\"text-secondary\"}>Multiple tags separated by comma</span></label>\n                    <div className=\"col-sm-9\">\n                        <input id=\"tags\" className=\"form-control\" type={\"text\"}\n                               value={tags.tags}\n                               onChange={e => onTagsInputChange(e)}/>\n                        <div className=\"invalid-feedback\" style={tags.isValid===false ? {display:\"block\"} : {display: \"\"}}>tags cannot be empty</div>\n                    </div>\n                </div>\n\n                <div className=\"row my-2\">\n                    <div className=\"col text-end\">\n                        <button className=\"btn btn-primary btn-lg\" type=\"submit\" disabled={!canSubmit} onClick={()=>onSubmit()}>submit </button>\n                    </div>\n                </div>\n\n        </div>\n\n    )\n\n\n}\n\nexport default  ThreadCreator;","import {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { validateUser } from \"../redux/actions\";\nimport { LOGIN_STATE } from \"../redux/storeConstants\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSignInAlt,faUser} from \"@fortawesome/free-solid-svg-icons\";\n\n\nlet editingBegun = false;\n\nconst Login = () => {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const loginState = useSelector(state => state.login.loginState);\n\n\n    const dispatch = useDispatch();\n\n    const handleLogin = () => {\n        dispatch(validateUser(username, password));\n        clearForm();\n    }\n\n    const handleKeyPress = event => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            handleLogin();\n        }\n    }\n\n    const clearForm = () => {\n        editingBegun = false;\n        setUsername(\"\");\n        setPassword(\"\");\n    }\n\n    return (\n        <div className={\"bottom-container\"}>\n            <h2 className={\"display-5 font-weight-bold text-dark\"} >Sign in to post <FontAwesomeIcon icon={faUser}/></h2>\n            <p> Using username:zitao password:1234</p>\n            {\n                !editingBegun && loginState === LOGIN_STATE.INVALID_LOGIN &&\n                <div className=\"alert alert-danger\" role=\"alert\">Invalid username / password! Please try again.</div>\n            }\n            {\n                !editingBegun && loginState === LOGIN_STATE.NETWORK_ERROR &&\n                <div className=\"alert alert-danger\" role=\"alert\">Unable to connect to the server. Please check your internet connection.</div>\n            }\n            <div className=\"row my-4 add-form\">\n                <div className=\"col-12 col-sm-2\">\n                    <label htmlFor=\"username\" className=\"form-label   fst-italic h5\">Username:</label>\n                </div>\n                <div className=\"col\">\n                    <input type=\"text\" id=\"username\" name=\"username\"\n                           className=\"form-control\"\n                           value={username} onChange={e => {\n                        editingBegun = true;\n                        setUsername(e.target.value);\n                    }}\n                           onKeyUp={e => handleKeyPress(e)}\n                    />\n                </div>\n            </div>\n            <div className=\"row my-4 add-form\">\n                <div className=\"col-12 col-sm-2\">\n                    <label htmlFor=\"password\" className=\"form-label  fst-italic h5\">Password:</label>\n                </div>\n                <div className=\"col\">\n                    <input type=\"password\" id=\"password\" name=\"password\"\n                           className=\"form-control\"\n                           value={password} onChange={e => {\n                        editingBegun = true;\n                        setPassword(e.target.value);\n                    }}\n                           onKeyUp={e => handleKeyPress(e)}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <button className=\"btn btn-secondary float-end\" onClick={handleLogin}>\n                        Log in <FontAwesomeIcon icon={faSignInAlt}/>\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Login;\n","const Loading = () =>\n    <div className=\"d-flex align-items-center h1\">\n        <strong>Loading...</strong>\n        <div className=\"spinner-border ms-auto\" role=\"status\" aria-hidden=\"true\"></div>\n    </div>\n\nexport default Loading;","import ViewChange from \"./ViewChange\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useState} from \"react\";\nimport ThreadCreator from \"./ThreadCreator\";\nimport {getThreads, logout} from \"../redux/actions\";\nimport Login from \"./Login\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSignOutAlt,faTags,faMailBulk,faFilter} from \"@fortawesome/free-solid-svg-icons\";\nimport Loading from \"./Loading\";\n\n\n\nconst ThreadBoard = () => {\n    const tagChoice = useSelector(state => state.threads.tags);\n    console.log(tagChoice)\n    const thread= useSelector(state => state.threads.thread);\n    const loginState = useSelector(state => state.login.loginState);\n    const selectedThread = useSelector(state => state.threads.selectThread);\n\n    const [tagSet,decideTagSet]=useState([])\n    const dispatch =  useDispatch();\n\n    const state =useSelector(state => state)\n    console.log(state)\n\n\n    const updateTagChoice = event=>{\n        let target = event.target\n        let value = Array.from(target.selectedOptions, option => option.value);\n        decideTagSet([...value]);\n    }\n\n    const quickLogOut =()=>{\n        dispatch(logout())\n        dispatch(getThreads());\n\n    }\n\n\n    const ids = Object.keys(thread).sort(function(a,b){return -1*(thread[a].post_time-thread[b].post_time)})\n\n    return (\n        <>{\n            Object.keys(thread).length===0?\n                <Loading/>:\n                (selectedThread === undefined?\n                (\n                    <>\n                        <div className={\"filter\"}>\n                        <h2 className={\"display-5 font-weight-bold text-success\"}>Filter <FontAwesomeIcon icon={faFilter}/></h2>\n                            <div className=\"container my-4\">\n                                <div className=\"row my-2\">\n                                    <label className=\"col-sm-2 col-form-label\" htmlFor=\"selectCategory\"><p className={\"h3 text-center text-success fst-italic\"}><FontAwesomeIcon icon={faTags}/> Tags: </p></label>\n                                    <div className=\"col-sm-10\">\n                                        <select id=\"selectCategory\" className=\"form-select\" multiple onChange={updateTagChoice}>\n                                            <option value=\" \" disabled className={\"option\"}>Select one/multiple tags (by using Ctrl+click to select multiple, Ctrl + double click to unselect)</option>\n                                            {\n                                                tagChoice.map((tag,id) =>\n                                                    <option key={id} value={tag} className={\"option\"}>{tag}</option>\n                                                )\n                                            }\n                                        </select>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <h2 className={\"display-5 font-weight-bold text-primary\"}>Threads <FontAwesomeIcon icon={faMailBulk}/></h2>\n                        <div className={\"thread\"}>\n\n                            {\n                                tagSet.length===0?\n                                    (ids.map(id => (\n                                        <ViewChange id={id} index={0}/>\n                                    ), thread)):\n                                    (ids.map(id => (\n                                        thread[id].tags.filter(value => tagSet.includes(value)).length>0?\n                                            <ViewChange id={id} index={0}/>:\"\"\n                                    ), thread))\n\n                            }\n                        </div>\n\n\n                        <div>\n                            {loginState === \"logged in\" ?\n                                (<div>\n                                        <div className={\"bottom-container\"}>\n                                            <ThreadCreator/>\n                                        </div>\n                                        <div className={\"d-grid gap-2 col-6 mx-auto\"}>\n                                            <button className=\"btn btn-warning \" type=\"button\"\n                                                    onClick={()=>quickLogOut()}>\n                                                logout <FontAwesomeIcon icon={faSignOutAlt}/>\n                                            </button>\n                                        </div>\n                                    </div>\n                                ) : <Login/>}\n                        </div>\n               </>\n                )\n                :\n                (\n                    <>\n                        <ViewChange id={selectedThread} index={1}/>\n                    </>\n                ))\n        }\n      </>\n)\n\n}\nexport default ThreadBoard;","import {useDispatch} from \"react-redux\";\nimport {getThreads} from \"../redux/actions\";\nimport ThreadBoard from \"../components/ThreadBoard\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faComments} from \"@fortawesome/free-solid-svg-icons\";\n\n\n\nconst App = () => {\n    const dispatch =  useDispatch();\n    dispatch(getThreads());\n\n\n    return (\n        <div className=\"container main my-4\">\n            <h1>Zitao's Discussion Board <FontAwesomeIcon icon={faComments} /></h1>\n            <ThreadBoard/>\n        </div>\n\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/styles.css';\nimport store from \"./redux/store\";\nimport App from './views/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}